Ejemplo de un algoritmo para generar imágenes fractales en java 11 de manera óptima en cuanto a rendimiento y consumo de memoria, sin utilizar librerías de terceros. este ejemplo utiliza el conjunto de mandelbrot como fractal, pero el mismo enfoque se puede aplicar a otros conjuntos fractales. public class fractalgenerator { public static final int width = 800; public static final int height = 600; public static final int max_iterations = 100; public static final double zoom = 150; public static void main(string() args) { bufferedimage image = new bufferedimage(width, height, bufferedimage.type_int_rgb); long starttime = system.currenttimemillis(); generatefractal(image, -2.5, 1, -1, 1); long endtime = system.currenttimemillis(); system.out.println("time taken: " + (endtime - starttime) + "ms"); saveimage(image, "fractal.png"); } public static void generatefractal(bufferedimage image, double xmin, double xmax, double ymin, double ymax) { int() colors = new int(max_iterations); for (int i = 0; i < max_iterations; i++) { colors(i) = color.hsbtorgb(i/256f, 1, i/(i+8f)); } for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { double zx = 0; double zy = 0; double cx = xmin + (x * (xmax - xmin) / width); double cy = ymin + (y * (ymax - ymin) / height); int iter = 0; while (zx * zx + zy * zy < 4 && iter < max_iterations) { double tmp = zx * zx